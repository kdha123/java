★★★★★
util/
1. 래퍼클래스 ( WrapperClass ) : 기본 자료형 클래스를 랩퍼 클래스라 한다 

기본자료형------WrapperClass
byte---------------Byte
short--------------Short
int     -----------Integer
long --------------Long
float--------------Float
double-------------Double
char---------------Character
boolean----------Boolean

실습
src/ch15_util
Test01_Wrapper.java

2. Hashtable : 검색이 빠르다(검색이 용이하다)
---------------------------------
  key         value
---------------------------------
 "id"         "kim"
"pwd"         "12345"
---------------------------------
Hashtable 메서드
Object put(Object key,Object value)  => 해쉬테이블에 저장
Objec get(Object key)=>해쉬테이블로 부터 값을 얻는다
Object remove(Object key) => 해쉬테이블의 값 제거
int size() : 해쉬테이블의 키 갯수를 구한다 

실습 Test02_Hashtable.java

3. Calendar , Date
실습
Test03_Calendar.java
Test04_Date.java
Test05_Calendar.java

----------------------------------
4. String , StringBuffer
----------------------------------
String , StringBuffer( 실행 속도가 빠르다 )

StringBuffer : 동적문자열 처리 

생성자 들
StringBuffer( )  : 디폴트 생성자 
StringBuffer(int size) : size를 기본크기로 지정 
StringBuffer(String str) : str 초기문자열 지정


메서드 들 
----------------------------------
StringBuffer append(boolean b) : 현재 문자열 끝에 b를 추가 
StringBuffer append(char ch) : 현재문자열 끝에 ch를 추가 
StringBuffer append(int i) : 현재 문자열 끝에 i 를 추가
StringBuffer append(long l) : 현재문자열 끝에 l 를 추가 
StringBuffer append(float f) :현재문자열 끝에 f 를 추가 
StringBuffer append(double d) :현재문자열 끝에 d 를 추가 
StringBuffer append(String str) :현재문자열 끝에 str문자열을 추가 
StringBuffer append(Object obj) : 현재문자열 끝에 obj 를 추가 

int capacity() : 현재 문자열의 버퍼크기를 반환 

char charAt(int index) :  index 위치에 해당 문자 반환 
                          198812-1055910 

int length( ) : 문자의 갯수를 반환  참고:배열.length

StringBuffer insert(int i ,boolean b) : i번 인덱스 앞에 b를 추가
StringBuffer insert(int i, char ch); i번 인덱스 앞에ch 를 추가
StringBuffer insert(int i, int j) : i번 인덱스 앞에 j를 추가
StringBuffer insert(int i, long l) :i번 인덱스 앞에 l를 추가
StringBuffer insert(int i, String str) :i번 인덱스 앞에 str 문자열을 추가
StringBuffer insert(int i,Object obj) : i번 인덱스 앞에 obj를 추가

 
StringBuffer reverse() : 문자열을 역순으로 변환해 준다 
void setCharAt(int i, char ch) : i번째 문자를 ch로 바꾼다 
void setLength(int len) : 버퍼크기를 len 크기로 재설정 

실습
Test06_StringBuffer.java
Test07_String_sb.java  속도비교

----------------------------------
5. Vector : 자료형
----------------------------------
Vector 생성자
Vector(): 디폴트생성자 
Vector(int initialCapacity): 벡터 크기 지정
Vector(int initialCapacity, int capacityIncrement) :벡터 크기 지정,증가치

[Vector메서드들]
add(Object newElement)
get(i): 벡터의 i번째 객체얻기 
size() : 요소갯수 리턴
remove() : 요소제거 

실습
Test08_Vector.java

----------------------------------
6. StringTokenizer : 자료형
----------------------------------
StringTokenizer : 문자열 파싱

메서드들
nextToken() : 파싱된 문자열을 차례로 리턴해 준다 
hasMoreTokens() : nextToken()한 뒤에 Token이 남아 있는지 여부 확인
countTokens() :토큰 갯수 리턴

String 메서드
split() : 문자열 파싱


실습: Test10_StringToken.java


----------------------------------
7. Properties : 자료형
----------------------------------
전역변수=필드=프로퍼티(property)=속성

Properties는 말그대로 속성을 모아서 하나의 객체로 만들기 위해 
제공되는 클래스이다 

이런 클래스가 필요한 이유는 
프로그램을 시작되기 전에
여러 개의 속성들중 원하는 속성들을 미리 인식하게 하여
전반적인 실행환경을 좀더 신속하게 하기위한 것이 목적이다

메서드들
put(key,value);// 변수=값
getProperty(key); //key에 해당하는 값을 얻는다 
list(PrintWriter out) : 목록을 출력

실습
Test12_Properties.java

db.properites
-------------------------------
#c:\_java\"db.properites"
driver=com.mysql.jdbc.Driver
url=jdbc:mysql://localhost:3306/mydb
user=root
pwd=12345
-------------------------------
Test13_Properties.java

----------------------------------
8. Object 메서드들 
----------------------------------
자바에서는 기본 패키지 java.lang 이란 패키지를 제공해 주고 있다 
java.lang 에 있는 모든 클래스의 수퍼클래스인 Object와 
기본자료형 클래스인 래퍼클래스와 표준 입출력을 위한 System클래스등이 있다 

java.lang.Object 클래스는 모든 자바 클래스의 최상위 클래스이다 
자바의 모든 클래스들은 Object클래스로부터 상속받는다

상속받지 않고 클래스를 설계 했더라도 
Object가 내부적으로 상속 받아 지는 것이다 

------------------------------------
Object 메서드들 

protected Object clone() : 객체 복사 

public boolean equals(Object ob) : 두 객체를 비교할때 사용(문자열 비교)

public int hashCode() : 자바 객체를 식별하는 정수 값인 해쉬코드를 반환
                        모든 객체는 해쉬코드로 관리한다

Test A,B,C; 객체들을 해쉬코드로 관리


public Class getClass() : 객체의 클래스이름을 Class형으로 반환한다
public String toString() : 객체를 문자열로 반환


참조 : Date, StringBuffer => toString()을 사용하여 문자열로 변환


public void notify()==> 현재 스레드가 일을 다 했다는 것을  알려준다 
                        그러면 다음 대기 스레드가 수행된다 

public void notifyAll()==> 현재 스레드가 일을 다 했다는것을 모두 에게                            알려준다 . 다음 대기중인 스레드가 수행된다 

public void wait() ==> 현재 스레드를 기다리게 한다 ( 대기 상태로 )

웹프로그램 할때는 웹 서버 자체에서 스레드를 제공한다 

실습

Test14_Object.java
Test15_Object_clone.java


----------------------------------
9. String 메서드들 
----------------------------------
int length() : 문자열 길이(갯수)
equals(Object ob) : String 문자열 비교 
equalsIgnoreCase(Object ob): 대소문지 구분 않고 비교

substring(int start): start부터 끔까지 문자열 발췌
substring(int start,int end):start부터 end직전까지 문자열 발췌

concat(String str): 문자열 합침
replace(char old, char new): 문자열 치환

toLowCase(): 소문자로 변환
toUpperCase():대문자로 변환

charAt(int index):index번째 문자 리턴(반환)
"881219-1055910"


String s1="hello";//변수
String s2="hello";//변수
System.out.println(s1==s2);//true
문자열이 똑 같은 경우는 같은 주소(곳) 참조

String s3=new String("hello");//객체생성
String s4=new String("hello");//객체생성
System.out.println(s3==s4);//false
객체생성으로 하면 다른 주소를 참조한다

실습
Test16_String.java

----------------------------------
10. Random 클래스, Math.random()

Random : 임의의 값을 발생 시켜주는 클래스

Random메서들
nextInt() : 임의의 정수 발생
nextInt(int n) :0~n 까지 임의의 정수 발생
nextBoolean() : 임의의 boolean 값 발생
nextFloat() : 0.0 ~ 1.0 사이의 임의의 float 값 발생
nextDouble() : 0.0. ~1.0 사이의 임의의 deouble 값 발생 

Math.random(): 0.0 ~ 1.0 사이의 임의의 난수 발생 
Math.random()*가지수(큰수-작은수+1)+나올수 있는 가장 작은 수

주사위  : Math.random()*(6-1+1)+1
----------------------------------
실습 : Test19_Random.java




