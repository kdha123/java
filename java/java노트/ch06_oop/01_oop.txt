oop ( Object Oriented Programming)
       객체    지향       프로그래밍

1. 객체지향 개념
2. 메서드, 오보로드(Overload), 변수휴효범위
3. 생성자, 생성자 중복(Overload)
4. this, super 키워드

5. 클래스
6. 인터페이스, 추상클래스
7. 클래스 상속, 인터페이스 상속, 추상클래스 상속

8. package
===========================================

1. 객체지향 개념
    클래스 만드는 것은 자료 설계라 한다

    클래스는 레퍼런스 자료형이다

    int a=10;
    클래스이름 클래스변수=new 클래스이름();//객체생성

    클래스변수를 객체라 한다 , 객체가 메모리 load되어 있으면 인스턴스라한다


    
   - 예 : 
     Test.java  (자료 설계)
     Test.class (레퍼런스 자료형)
     
     int a=10;
     Test t=new Test();//객체 생성 ( t변수 => t객체 => 인스턴스)
     t.메서드();

   - 클래스 = 모듈(단위 프로그램)
   - 클래스는 레퍼런스 자료형이다 

2. 객체지향 4대 특징
   ☞ 캡슐화, 은익화(private 으로 선언된 변수,메서드 말한다, 외부에서 잡근 불가능 하다)
   ☞ 상속 : class Test extends Object  , 최상위 클래스는 Object이다
   ☞ 다형성 (Overload, Overriding)
   ☞ 추상화 ( 복잡한것을 단순화라고 말할 수 있다.)
          클래스 설계자 입장 (복잡한 것)
          클래스 사용자 입장( 단순화 )

예:
class Test extends Object{//캡슐화:클래스를 묶는 것
    
    private 자료형 변수 //은익화
  
    public 리턴형 메서드(){처리내용}


}//class end

실습
ch06_oop 패키지 






