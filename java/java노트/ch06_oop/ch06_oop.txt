oop ( Object Oriented Programming) 
            객체    지향        프로그램

1. 객체지향 개념 
2. 메서드와 오버로드( OverLoad ), 변수 유효 범위 
3. 생성자 , 생성자 중복(Overload) 
4. this, super 키워드 

5. 클래스
6. 인터페이스, 추상클래스
7. 클래스 상속,  인터페이스 상속 , 추상 클래스 상속

8. package 

==============================
제 6 장  oop (Object Oriented Programming) : 객체지향 

1. 객체지향 개념
     - 하나의 클래스를 객체라 한다
     예: Test.java  ( 자료설계 )
          Test.class ( 자료형 )

          Test a=new Test();// a 객체 ( a 클래스변수)
           a.메서드(); // 메서드 실행 

    - 클래스=모듈(단위프로그램)
    - 클래스는 레퍼런스 자료형 이다 

2.  객체지향 4 대 특징
      ☞ 캡슐화 , 은익화(private 으로 선언된 멤버,외부 클래스에서는 접근못함)
      ☞ 상속  :  클래스 extends 상위클래스  : 참조 :최상의 클래스(Object)
      ☞ 다형성 ( Overload, Overriding)
      ☞ 추상화 (복잡한것을 단순화 )
              클래스 설계자 입장 (복잡한 것)
              클래스 사용자 입장 ( 단순화 )

     예:
     class Test extends Object { //☞ 캡슐화: 클래스를 묶는 것 
         //private 자료형 변수 ;// private 선언된 것 (은익화)
         //public 리턴형 메서드(){}
     }


☞ 다형성 (Polymorphism) 이란
-프로그램에서 하나의 형태로 여러 가지 작업을 하는것이 바로 다형성의 뜻 입니다   

-의미(semantics)는 하나지만 
  실제형태는 여러 가지가 될 수 있다는 말이다

먹는다(){내용:갈치조림}
먹는다(){내용:삼겹살}
먹는다(){내용:뼈해국장}

다형성은  객체지향 프로그래밍 언어에서
"오버로딩 (overloading)", 
"오버라이딩 (overriding)"의 형태로 나타난다.

* OverLoad (오버로드) : Math 클래스 참조
   1. 하나의 클래스 안에 이름이 같은 메서드가 여러개인 경우 
   2. 구분은 매개변수(인수) 로 한다 ,
       인수 갯수가 다르거나 , 인수자료형이 달아야 한다 
   
   class Test extends Object {
      public void aa(){}
      public int aa(int a, String name){}
      public int aa(String name, int a){}
   }
   
   3. 다른 클래스로 확장(상속)이 가능하다
   4. 리턴형은 같아도 달라도 상관없다 

* Overrding (오버라이딩)
   1. 상속 받은 메서드 내용 재정의 
   2. 리턴형, 인수개수 , 인수자료형은 반드시 같아야 한다 
   3. 접근제한자 상위와 같거나 , 더 넓은 개념으로 사용하면 된다
       상위 클래스 : proptected 
       하위 클래스 : protected, public 
       (파생 클래스)
   
   4. 상속 관계로서 사용 가능하다
   5. 또 다른 클래스로 , 확장(상속)가능 하다 
=========================
메서드 실습 
src/ch06_oop 패키지
 
