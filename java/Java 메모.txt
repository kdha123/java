
 기본설정 UTF-8로 바꿀 것 
 
 java 메모
​
자바의 변수형<-->상수
- 기본형 변수 (길이 고정) : 데이터
   * boolean(논리) - 1byte(8bit) - true or false
   * 숫자 - 정수(소수점의 위치가 정해져 있다.) : 부호 + 숫자.
    byte 1 - short 2 - int 4 - long 8 
  * 큰거에서 작은거로 할 때는 데이터 손실이 일어나기 때문에 캐스팅을 해야한다.
   * 실수(소수점 있다.) : 부호 + 지수 + 숫자
    float - double
    ex) 123.456 -> 1.23456 * 10 ** 2 , 0.000123456 -> 1.23456 * 10 ** -4
   * char(문자) - 2byte : 숫자로 저장한다.(마이너스가 없다.) ex) A-65
  * 음수 표현 : 부호+절대값, 1의 보수(1<->0), 2의보수(1의보수+1)
  
  *wrapper class -> 기본변수 타입의 맨 앞자리 대문자
   - Byte / Integer
​
- 참조형 (길이 가변) : 주소
  * null : 주소값이 없다.
  * 참조형 변수가 null인데 사용하려고 하면 null point Exception 발생
  * 기본형 변수[] : 배열, 클래스, 컬렉션, Map
  * 작은 데이터 -> 큰 데이터 : 자동 캐스팅이 된다. , 서로 연관이 있어야 한다. , 데이터 유실이 없는 경우
  * 큰 데이터 -> 작은 데이터 : 강제 캐스팅 한다. , 서로 연관이 있어야 한다. , 데이터 유실이 있는 경우, (캐스팅 타입) 변수
  * String --> char[]
   : == X, str.equals(str)
  * [] -> String[] args -> index : 주소에서부터 상대 거리 int[]
  * static new Object() -> main memory에 올린다. ->주소 : 생성자 -> 클래스이름과 같다. 리턴타입이 없다.
​
- 상수 변수
* final - 클래스, 메서드, 변수
* final 클래스 - 구성원 변경 불가
* final 메서드(){} - 처리문을 변경 불가
* final 변수 - 값을 변경 불가
​
- 주석
/** */ - 범위 주석 : 자동 문서화 작업 가능
/* */ - 범위 주석 :  개발자만 보기 위해 , 자동 문서화 불가능
// - 주석 표시 이후 줄 끝까지 주석
​
10진법 (0~9) - 사람
2진법 (0~1) - 컴내부
-> 3자리 묶자 : 8진법(0~7) 000~111
-> 4자리 묶자 : 16진법 (0~15) 000 ~ 1111 
​
음수 -> 양수인 경우는 생각안해도 된다.
부호 + 값
0000 -> + 000
0010 -> + 010 -> + 2
음수
1000 -> - 000 -> - 0 :  부호 절대값 -> 컴퓨터가 계산 불가
​
-2 :  + 2의 1의 보수를 구하자.(보수 : 숫자가 있다. 다른 숫자와 더해서 정해진 보수의 숫자가 완성이 되는 숫자.)
ex) 5의 9의 보수: 4
     1101 -1의 보수는 1이면 0, 0이면 1이 보전해서 완저너체인 1을 만드는 것을 보수 : 0 -> 1, 1 ->0로 만들면 1의 보수가 된다.
+2 : 0010
​
1의 보수를 사용한 경우 연산이 가능하다. 
+0 : 0000
-0 : 1111
 1000~ 0111 : -7 ~ +7
​
2의 보수 : 1의 보수 + 1
0000 ~ 0111
​
0001 -> 1110 +1 -> 1111
0010 -> 1101+1 -> 1110
0111 -> 1000 +1 -> 1001 (-7)
                 -> 1000 (-8)
자바 : 2의 보수를 사용 
​
package - 자바 프로그램의 위치
public class Test{~~}
자바 프로그램 작성 -> 컴파일 : class -> HDD
main memory 작업 키워드
static : 자동 -> Class명.main()
new : 수동 -> 프로그램으로 작성 -> 재사용하려면 변수 저장 - 참조형
​
10 12
args[0] = "10";
args[1] = "12";
​
**연산자
int + long -> (long) int + long -> long
byte + short -> int
float + float -> double

++a : 선 증가 후 처리    
a++ : 선 처리 후 증가
​
/ : 나누기 -> int / int -> int(소수점이 날아감) - 자바의 특징
% : 나머지 - 배수 처리
​
ex) a = a + 1; 
    a += 1;
    a++;
​
**논리연산자
1 : true
0 : false
​
and: &, && -> 둘다 true일 때 true
ex) a : 0 0 1 1
    b : 0 1 0 1
 a&b : 0 0 0 1
​
& : 0 & 0 ->  0 : 앞의 값과 뒤를 함께 확인함.
--> 앞에 것이 0이면 뒤에 것은 무의미하다.
&& : 0 & 0 -> 0 : 앞에 값이 0이면 뒤에 것은 확인하지 않는다.
​
Student - stdNo, name
Student std1 = null:
if(std1 ! = null & std1.stdNo == 10001) -> 오류
if(std1 ! = null && std1.stdNo == 10001) -> 처리
​
or : |, || -> 둘중에 하나가 true이면 true가 된다.
a : 0 0 1 1
b : 0 1 0 1
a|b:0 1 1 1
| : 앞에 것이 true더라도 뒤에 것을 확인
|| : 앞에 것이 true이면 뒤에 것을 확인하지 않는다.
​
비트연상 1,0 -> &,  | -> 처리문 안에 있다. a<<2
논리연상 T,F -> &, |, &&, || -> 조건 안에 있다.
​
조건연산자(삼항연산자)
(조건)? 참:거짓;
result = (score>=60)> "합격":"불합격";
if(score>=60) result = "합격";
else result = "불합격";
if(조건) true면 실행; else if(조건);
 - 연속데이터 비교(>,<) 반드시 if
 - 비연속 데이터(==) : switch
switch(key){
case 값: --> label
  break; --> switch, for, while을 빠져나온다.
  }
  
* 반목문 - for, while, do{}while
​
객체 - Class를 개발한다.
객체를 생성한다. -> 메인메모리에 올린다.

​
**배열
score1
score2
-----> 반복처리
여러개의 점수를 한꺼번에
배열-> 인덱스 0부터 시작해서 1씩증가 데이터의 갯수 처리하기 전에 정해져 있어야한다.
ex) arr.length -> Arrays.toString(arr) -> for(int i == 0; i<arr.length; i++)
syso(arr[i]);
향상된 for문(for each문)으로 하면 for(int a : arr) syso(a) 
ex)
new int[10]
50,60,70,80,90 - 5의 데이터

**객체지향언어
1. 재사용성이 높다.
2. 관리가 용이하다.
3. 신뢰성이 높다.
인스턴스 = 객체 같은 의미
클래스 - 객체를 정의해 놓은 것, 클래스로 부터 객체를 생성하면 클래스에 정의도니 속성과 기능을 가진 객체가 만들어지는 것이다.
       - 변수, 메서드, 특별한 메서드 - 생성자

**전역변수
클래스가 메모리에 올라갈 때 -  static
인스턴스가 생성되었을 때 - new

**지역변수 - 메서드 내에서만 사용 가능

**메서드(함수)
1. 재사용성
2. 중복된 코드의 제거
3. 프로그램의 구조화

**재귀호출  - Factorial예제
**오버로딩(over loading) - 메서드 이름이 같아야 한다., 매개변수의 개수 또는 타입이 달라야한다.(파라미터 값이 달라야한다.)

**생성자
1. 생성자의 이름은 클래스의 이름과 같아야한다.
2. 생성자는 리턴 값이 없다. (처리문을 선언해도 주소값이 나오기 때문에)
3. 클래스에 생성자를 정의하지 않아도 javac가 제공을 한다.
4. 매개변수가 있는 생성자를 만들 수 있다.
5. 생성자에서 다른 생성자를 호출할 때는 반드시 첫 줄에서만 호출이 가능하다. this()

**변수 초기화 방법
1. 명시적 초기화 - 변수 선언과 동시에 초기화하는 것
2. 생성자
3. 초기화 블럭 - 부르지 않아도 실행된다. static은 클래스 초기화 블럭, 그냥은 인스턴스 초기화 블럭

**자료구조형 -> 컬랙션(v), map(k-v)

**상속
ex) Super - A,B 큰거
Sub1 extends Super - D,F,(A,B) 작은 거
Sub2 extends Super - I,J,(A,B)
큰 거에서 적은 것으로 갈 때는 반드시 캐스팅을 해야한다.

**로그인
if(로그인 조건)
조건에 관여하는 변수의 값으로 조건을 물어본다.

로그인처리
로그인상태  - 로그인 : 데이터가 있다.
           - 로그아웃 : 데이터가 없다.(null)
로그인 처리  - 사용자에게 필요한 데이터를 받아서 DB에서 조건에 맞는 데이터를 가져와서 로그인으로 지정된 변수의 값을 넣어준다.
로그아웃 처리 - 로그인으로 지정된 변수에 null을 넣어준다.
로그인으로 지정된 변수의 특징 : public static 처음부터 사용해야하므로 Main에서 넣어서 사용해본다.

** 페이지 이동시키는 방법
1. 브라우저 주소란에 url을 입력한다.
http://localhost:8080/test/board/list.jsp
http://www.naver.com:80/index.html
2. HTML <a href = "url>연결</a> :연결을 클릭하면 url로 이동
3. HTML <form action="url"></form> : 많은 데이터를 url로 넘겨서 처리하고자 할때 -> input, select, textarea
4. JS<tag onclick = "location=url">클릭</tag> location = "url";
5. response.sendRedirect("url"); -> 서버에서 클라이언트의 브라우저 href의 내용을 바꾸도록 요청

** Servlet : 서버쪽에서 동작되는 자바 프로그램
- Servlet을 상속 받았다. - 특별한 메소드에 프로그램을 작성
<특별한 메서드>

-> 프로그램의 간소화 => HTML화 시킨 코드 사용 : JSP
