Server 사용되는 저장 객체

Application - 서버가 시작시 생성: 모든 사용자와 공통으로 사용 - 서버가 필요한 데이터 : 서버 종료 시 제거
    ↓
session - 사용자가 처음 접속시 생성: 사용자가 필요로 하는 데이터 SESSIONID-쿠키-사용자 컴퓨터에 저장 : 사용자 접속 종료 시 제거
    ↓ 
request - 요청이 있으면 생성 - 클라이언트 정보 : 요청 종료 시 제거
    ↓
page - 화면에 표시할 때 생성 - 화면 표시 정보 : 화면표시 종료 시 제거

만약에 request를 가지고 있으면 session과 Application을 꺼내서 불러올 수 있다.

setAttribute(k,y)
getAttribute(k,y)
- 모두 공통으로 씀

**server ->url을 이용해서 서버 자원에 접근

uri = 자원
/board/list.jsp = list_jsp.class=> tomcat -> public class list_jsp{}
request, response로 파라메터를 가져와서 실행하는 servlet 
doget(), dopost(), init(), service()

servlet(url pattern => 실행클래스)

사용자 url 요청 -> 데이터처리(JAVA) ->request.forward:(htmle->string + <% %>->javadata)-> 화면에 보이기(JSP)
/board/list.do -> 게시판이라고 알아내는 controller를 짜고-> 게시판에 Controller를 짜고

** 페이지 이동 시키는 방법
1. 브라우저의 주소란에 url을 입력한다.
http://localhost:8080/test/board/list.jsp
naver.com
http://www.naver.com:80/index.html

2. HTML <a href="url">연결</a> : 연결을 클릭하면 url로 이동

3. HTML <form action="url"></form> : 많은 데이터를 url로 넘겨서 처리하고자 할때 -> input, select, textarea -> 데이터 넘기기 : button tag
url?key=value&key=value

4. JS <tag onclick="location='url'">클릭</tag>
 location = "url";

5. response.sendRedirect("url"); -> 서버에서 클라이언트의 브라저 href의 내용을 바꾸도록 요청 ->자동이동
=> java

속도차이 때문에 사용되는 메모리 buffer

로그인처리는 session으로 해서 한 후에 sitemesh를 해야함

[퇴근미션 작업 순서]
1. project 생성 - Dynamic Web project : project1120 - web.xml을 함께
2. 라이브러리 등록 - jdbc8.jar, jstl-1.2.jar  /WEB-INF/lib 복사해서 붙여넣기
3. com.webjjang.main.FrontController - servlet -> service(request,response) 작성
4. web.xml에 servlet과 servlet-mapping 등록 : mainServlet
5. interface 작성 - Controller - String excute(request,uri), Service - Object service(Object[] objs)
6. com.webjjang.board.dto.BoardDTO - no, title, content, writer, writeDate, hit
7. com.webjjang.board.dao.BoardDAO.list() -List<BoardDTO> list가 null이면 ArrayList생성, list.add 까먹지말기
8. com.webjjang.board.service.BoardListService.service()
9. Beans.init() - Servlet을 이용한 서버실행할 때 객체생성(value = "/Beans",loadOnStartup = 1 )
9-1. dao 생성, service 생성, controller생성 
10. com.webjjang.board.controller.BoardController.execute() - String이 리턴타입
11. Execute.service(service, object...objs)
12. com.webjjang.board.controller.BoardController.execute() String jsp변수 생성후에 setAttribute메소드로 완성
13. Beans.init()에서 BoardController를 생성한다. DI적용
14. jsp 쪽으로 forward하기위해서 ViewResolver.forward()
14-1. ViewResolver에서 String getJSP(String jsp)=> PREFIX + jsp + SURFIX
14-2. forward(request, response, jsp){if(jsp.indexOf("redirect:")==0 일 때)redirect:의 길이만큼 jsp를 잘라내고 sendRedirect!, getRequestDispatcher.forward
15. FrontController controller를 Beans에서 받아오고 uri에 getServletPath하고 완성
16. /WEB-INF/views/board/list.jsp 작성
17. 서버 생성 및 


**페이징 처리하기
1. 게시판 데이터 전부 - 정렬
select no, title, writer, writeDate, hit from board order by no desc;
2. 정렬된 데이터에 번호를 붙인다.
select rownum rnum, no, title, writer, writeDate, hit
from(
    select no, title, writer, writeDate, hit from board order by no desc;
)
3. 번호를 붙인 데이터로 부터(from) 페이지에 맞는(조건:where) 갯수 데이터 가져오기(한페이지에 10 1페이지: 1~10)
select *
from(
    select rownum rnum, no, title, writer, writeDate, hit
from(
    select no, title, writer, writeDate, hit from board order by no desc;
))where rnum between 1 and 10;

--------------
perPageNum(페이지당 글의 개수) : 10

1page : 1~10
2page : 11~20
3page : 21~30
...
n page : 시작줄 = 이전페이지의 갯수를 넘긴 다음번호
n page : (n-1)*perPageNum + 1
n page : 끝나는 줄 = 시작 줄 + 한페이지의 표시하는 갯수 - 1
n page : startRow + perPageNum - 1
---------------
jsp에서 리스트 하단부분 페이지 클릭 부분 : 페이지네이션
전체페이지
전체데이터의 갯수 : DB
select count(*) from board;
-> BoardDAO.getTotalRow(){}
-> 데이터를 넣는 코드 BoardListSerivce 작성
-> 전체 데이터 갯수를 이용해서 전체 페이지를 구한다.

(totalRow - 1)/ perPageNum + 1 -- 10이면 2가 되기때문에 -1을 해준다.
-----------------------
pageGroup - perGroupPageNum : 페이지 그룹에 나타나는 페이지의 개수
1 -> 1~10
2 -> 1~10
...
10 -> 1~10
11 -> 11~20

page -> (page - 1) / perGroupPageNum * perGroupPageNum + 1



**AJAX(Asynchronous JavaScript and XML)- 비동기 통신
- 사용의 요청에 따라 데이터가 전환을 하는 통신처리, 브라우저의 URL이 바뀌지 않는다.-> 일부 내용이 바뀐다.
- 모바일 처리에서 주로 사용한다.(서버와 연결되어 있지 않는다.- 기기내 앱)

- 주요 사용되는 jQuery의 데이터는 주로 화면단에 있는 document나 javascript안에 있는 배열 등의 데이터를 사용했다.
- Ajax 기술은 데이터가 서버에 존재해서 위에 URL을 바뀌지 않으면서 서버에 있는 데이터를 가져와서 적당한 곳에 표시한다.

-Synchronous JavaScript and XML - 동기 통신 : 사용자의 요청에 따라 페이지 전환을 하는 통신 처리 브라우저의 URL이 바뀐다. -> 전체 화면의 내용이 바뀐다.






